@inherits LayoutComponentBase
@using CMouss.IdentityFramework;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@inject NavigationManager NavManager


<FluentLayout>
    <FluentHeader>
        Dynamic Board Application
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        @if (isInitComplete)
        {
            <NavMenu />
        }
        <FluentBodyContent>
            <div class="content">
                @if (isInitComplete)
                {
                    @Body
                }
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <div class="link1">
            <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        </div>
        <div class="link2">
            <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
        </div>
    </FluentFooter>
</FluentLayout>


@code {
    private bool IsAdministrator = false;
    public bool isInitComplete = false;

    protected override void OnInitialized()
    {
        GetUserInfo();
        isInitComplete = true;
    }

    public async Task GetUserInfo()
    {
        try
        {
            var result = await BrowserStorage.GetAsync<string>("token");
            if (result.Success && result.Value.Length > 10)
            {
                UserToken userToken = IDFManager.UserTokenServices.Validate(result.Value);
                if (userToken == null)
                {
                    RedirectToLogin();
                }
                else
                {
                    if (userToken.User.Roles is not null)
                    {
                        if (userToken.User.Roles.Count > 0)
                        {
                            IsAdministrator = userToken.User.Roles.Any(item => item.Title.ToLower().Trim() == "administrators");
                            if (!IsAdministrator)
                            {
                                RedirectToLogin();
                            }
                        }
                    }
                }
            }
            else
            {
                RedirectToLogin();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            RedirectToLogin();
        }
    }

    public void RedirectToLogin()
    {
        BrowserStorage.DeleteAsync("token");
        StateHasChanged();
        NavManager.NavigateTo("/");
    }

}
