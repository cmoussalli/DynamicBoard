@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="DynamicBoard.Application.styles.css" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <HeadOutlet @rendermode="new InteractiveServerRenderMode(prerender: false)" />
</head>

<body>
    <Routes @rendermode="new InteractiveServerRenderMode(prerender: false)" />

    @*
    temporeraly comented
    <Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
    <RouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)" />
    @if (IsUserAuthenticated())
    temporeraly comented
    {
    <RouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)" />
    }
    else
    {
    <RouteView RouteData="@routeData" DefaultLayout="typeof(Layout.EmptyLayout)" />
    }
    </Found>
    <NotFound>
    <!-- Handle
    the 404 page -->
    </NotFound>
    </Router> *@


    <script src="_framework/blazor.web.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <script src="js/DynamicBoard.js"></script>
    <script src="js/site.js"></script>
</body>

</html>
@code {
    // private bool IsUserAuthenticated()
    // {// temporeraly comented
    //     var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult();
    //     return authState.User.Identity.IsAuthenticated;
    // }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadScript", "js/dynamicboard.js");
            await JSRuntime.InvokeVoidAsync("loadScript", "js/site.js");
        }
    }
}