@page "/UsersIntegrateWithChart"
@using DynamicBoard.Application.DomainServices
@using DynamicBoard.DataServices.Models

@rendermode InteractiveServer


@if (ChartId != 0)
{
    <FluentStack HorizontalAlignment="HorizontalAlignment.Start">

        <FluentAnchor OnClick="@OnOpen"
                      IconStart="@(new Icons.Regular.Size24.DocumentAdd().WithColor(Color.Success))">
            + Add Users with Chart
        </FluentAnchor>

    </FluentStack>
    <br />

    <UserLists @ref="@usersList" ChartID="@ChartId"></UserLists>



}
else
{
    <FluentLabel Style="color:red">Please select an Chart from list view.</FluentLabel>


}



<FluentDialog @ref="_myFluentDialog" @bind-Hidden="@Hidden" aria-label="Simple dialog" Modal=@_modal TrapFocus=@_trapFocus PreventScroll=@_preventScroll @ondialogdismiss=OnDismiss>
    <FluentDialogHeader Visible="false" />
    @if (ActionForAdd == true)
    {
        <UsersDropDownList OnResponse="@GetResponse"></UsersDropDownList>
        <br />
    }
    <br />
    <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnAdd">Add</FluentButton>

    <FluentButton Appearance="Appearance.Accent"   @onclick="OnClose">Cancel</FluentButton>
    <br />
    <FluentLabel Color="@((isError) ? Color.Success: Color.Error)">@message</FluentLabel>
    </FluentDialog>
    @code {
    [Parameter]
    public long ChartId { get; set; }


    List<ExtendLnk_Charts_Users> extendLnk_Charts_Users = new();
    public IQueryable<ExtendLnk_Charts_Users>? lnk_Charts_UsersList;

    public bool ActionForAdd = false;
    private string? _status;
    public bool isError ;
    string message = "";
    string UserId = "";
    string actionTitle = "Add";
    private bool Hidden { get; set; } = true;
    private FluentDialog? _myFluentDialog;
    private bool _trapFocus = true;
    private bool _modal = true;
    private bool _preventScroll = true;
    DynamicBoardUserServices dynamicBoardUserServices = new();
    DynamicBoardChartServices chartsServices = new();
    Lnk_Charts_Users lnk_Charts_Users = new();
    UserLists usersList;
    protected override async Task OnInitializedAsync()
    {
        
    }
    private void OnOpen()
    {
        UserId = "";
        ActionForAdd = true;
        _status = "Dialog opened with button click";
        _myFluentDialog!.Show();
        StateHasChanged();
        // DemoLogger.WriteLine(_status);
    }

    private async Task OnAdd()
    {
        lnk_Charts_Users.UserId = UserId;
        lnk_Charts_Users.ChartId = ChartId;
        if (!string.IsNullOrEmpty(UserId))
        {
            long result = 0;
            result = await dynamicBoardUserServices.LinkChartWithUsers(lnk_Charts_Users);
            if (result <= 0)
            {
                isError = false;
                message = "something went wron please try again";

            }
            else
            {
                isError = true;
                message = "User has been added Successfully";
            }
            StateHasChanged();
            await Task.Delay(1000);
            message = "";
            lnk_Charts_Users = new();
            _status = $"Dialog dismissed with reason: Close button clicked";
            _myFluentDialog!.Hide();
            await LnkChartUsersGet(ChartId);
        }
        else
        {
            isError = false;
            message = "Please select any user";
            StateHasChanged();
        }

        //  DemoLogger.WriteLine(_status);
    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            _status = $"Dialog dismissed with reason: Dismissed";
            _myFluentDialog!.Hide();
            //  DemoLogger.WriteLine(_status);
        }
    }

    private void OnClose()
    {
        _status = $"Dialog dismissed with reason: Close button clicked";
        _myFluentDialog!.Hide();
        //  DemoLogger.WriteLine(_status);
    }
 
    public async Task LnkChartUsersGet(long chartID)
    {
        //extendLnk_Charts_Users = await chartsServices.GetLinkChartsUsersByChartIDAsync(chartID);
        // lnk_Charts_UsersList = extendLnk_Charts_Users.AsQueryable();
        // if (usersList is not null)
        // {
        await usersList.GetLinkChartsUsersByChartId(chartID);
        // }

        StateHasChanged();
    }
    public async Task GetResponse(string userId)
    {
        UserId = userId;

        StateHasChanged();

    }
    }
