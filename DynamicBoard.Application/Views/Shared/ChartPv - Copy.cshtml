@using DynamicBoard.Application.Model
@using DynamicBoard.Models
@using Microsoft.JSInterop

 @model RenderChart

@inject IJSRuntime JSRuntime

 
@* 
    <div class="row">
        <div class="col-12">


        <canvas id="canvas_@Model.ChartID" style="pointer-events: none;"> Chart Canvas </canvas>
        </div>

    </div>
 *@


@* <style>
    .draggable {
        width: 150px;
        height: 150px;
        padding: 0.5em;
    }
</style> *@
@* <script src="~/js/dist/chart.umd.min.js"></script>

<script src="~/js/jquery-3.6.0.min.js"></script> *@
@* <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script> 

  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.umd.min.js"></script>
 
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  *@
@* <script type="text/javascript" charset="utf-8">
    $(document).ready(function () {

        var RefershTime = '@Model.RefershTime';
        var canvasXaxis_labels = @Html.Raw(Model.JsonXaxis_labels)  ;

        var canvasChartType = '@Model.ChartType';
        var configuration = @Html.Raw(Model.json_graphConfigurations);
        var canvasjsonchartTitle = '@Html.Raw(@Model.jsonchartTitle)';

        var Yaxis_Data = @Html.Raw(Model.json_graphConfigurations);;
        var Yaxis_Data_Dataset = Yaxis_Data;//Yaxis_Data[0].datasets;
        //debugger
        var Isstacked = false;
        var _height = 0;

        if (canvasChartType == "Bar") {
            canvasChartType = "bar";
        }
        if (canvasChartType == "Stacked Bar") {
            canvasChartType = "bar";
            Isstacked = true;
        }
        if (canvasChartType == "Pie") {

            canvasChartType = "doughnut";
        }
        if (canvasChartType == "Line") {
            canvasChartType = "line";
        }

        var canvas = 'canvas_' + @Model.ChartID;


        //loadCanvas(@Model.ChartID);
        var ctx = document.getElementById(canvas).getContext('2d');
        //debugger


        var myChart = new Chart(ctx, {
            type: canvasChartType,
            data: {
                labels: canvasXaxis_labels,//x axis labels
                datasets: Yaxis_Data_Dataset,
            },
            options: {
                legend: { display: false },

                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: canvasjsonchartTitle
                    },
                },
                responsive: true,
                interaction: {
                    intersect: false,
                },
                scales: {
                    x: {
                        stacked: Isstacked,
                    },
                    y: {
                        stacked: Isstacked
                    }
                },
                title: {
                    display: true,
                    text: canvasjsonchartTitle
                },
            }
        });
        //debugger;
        // refersh time convert into seconds
        //var a = RefershTime.split(':'); // split it at the colons
        //// minutes are worth 60 seconds. Hours are worth 60 minutes.
        //var seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);

        // update chart after RefershTime seconds

        // setTimeout(function () {
        //     loadChart(@Model.ChartID);
        // }, @Model.RefershTime);
    });
    function refreshPage() {
        var a = 1;
        var pElement = document.getElementById("fresh_");
        pElement.textContent = 1 + 1;

        location.reload();
    }
    function loadChart(chartId) {

        var canvas = 'canvas_' + @Model.ChartID;

        var canvasTag = document.getElementById(canvas);
        var context = canvasTag.getContext("2d");

        // Clear the canvas
        context.clearRect(0, 0, canvasTag.width, canvasTag.height);

        // Redraw the canvas content
        // Add your code here to redraw the chart or any other content you have

        // Optionally, you can also reset the canvas size
        // canvas.width = canvas.width;
        // $.ajax(

        //     {
        //         type: 'GET',
        //         //dataType: 'JSON',
        //         url: '/Home/GetRequestChartPV?chartID=' + chartId,
        //         success:
        //             function (response) {
        //                 // $('#canvas_' + value.ChartID).appendTo('#divChartID' + value.ChartID);
        //                 debugger

        //                 //$('#divChartID' + value.ChartID).append(response);
        //                 $('#divChartID' + chartId).html(response);

        //             },
        //         error:
        //             function (response) {
        //                 debugger;
        //             //commented only for ignore temporarly
        //             //     alert("Error: shared chart pv " + response);
        //             }
        //     });
    }
</script> *@