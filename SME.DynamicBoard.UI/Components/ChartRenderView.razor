@if (isError)
{
    <p style="color:red">errorMessage</p>
}
else
{
    @if (!string.IsNullOrEmpty(url))
    {
        @*         <iframe src="@url" style="width: 100%;height: 100%;"></iframe>
 *@

        <iframe src="@url" allowfullscreen style=" position: center;    width: 405px;    height:450px;    border: 0;    overflow: hidden;"></iframe>
    }

}


@code {
    [Parameter] public ChartData ChartData { get; set; } = new();
    [Parameter] public string ChartId { get; set; } = string.Empty;
    [Parameter] public bool IsAllowRefresh { get; set; }
    [Parameter] public bool AutoLoad { get; set; } = true;
    [Parameter] public int Language { get; set; } = 0;
    string url = "";
    bool isError = false;
    string errorMessage;
    string queryStringParameters = "";
    string parameters = "";
    string values = "";
    private string ChartHTML { get; set; } = string.Empty;
    private bool isLoading = false;
    HttpClient httpClient = new HttpClient();
    private bool isIframeLoaded;

    protected override async Task OnInitializedAsync()
    {
        // await LoadIframe();
        if (AutoLoad)
        {
            await Refersh();
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        if (AutoLoad)
        {
            await LoadIframe();
        }

    }

    public async Task Refersh()
    {

        await LoadIframe();

    }

    public async Task LoadIframe()
    {
        parameters = "";
        try
        {
            if (string.IsNullOrEmpty(ChartId))
            {
                errorMessage = "chart id required";

            }
            else if (ChartData.ChartParams is null)
            {

                errorMessage = "parameters for chart required";
            }
            else if (ChartData.ChartParams.Count == 0)
            {
                errorMessage = "parameters for chart required";
            }
            else if (string.IsNullOrEmpty(Storage.EncryptionKey))
            {
                errorMessage = "EncryptedKey required";
            }
            else if (string.IsNullOrEmpty(Storage.RootAddress))
            {
                errorMessage = "root address of dynamic board required";
            }
            else
            {
                if (ChartData.ChartParams is not null)
                {
                    if (ChartData.ChartParams.Count > 0)
                    {
                        foreach (var item in ChartData.ChartParams)
                        {
                            foreach (var val in item.Values)
                            {
                                values += val + "|";
                            }
                            parameters += "[" + item.Name + ":" + values + "]";
                            values = "";
                        }



                        queryStringParameters = "";
                        queryStringParameters = "chartID=" + ChartId + "&parameters=[" + parameters + "]&token=" + "UserToken" + "&IsAllowRefresh=" + IsAllowRefresh + "&Language=" + Language;
                        EncryptionHelper.encryptionKey = Storage.EncryptionKey;
                        var encryptedData = EncryptionHelper.Encrypt(queryStringParameters);
                        url = Storage.RootAddress + "/Chart/GetChartEncrypted?Data=" + encryptedData;

                        ChartHTML = await httpClient.GetStringAsync(url);
                        isError = false;
                        StateHasChanged();
                    }

                }
            }


        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = ex.ToString();
            StateHasChanged();
        }


    }

}

