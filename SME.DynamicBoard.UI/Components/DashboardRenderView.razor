@if (isError)
{
    <p style="color:red">errorMessage</p>
}
else
{
    @if (!string.IsNullOrEmpty(url))
    {
        <iframe src="@url" allowfullscreen style=" position: center;border: 0;width:2200px;height:800px;"></iframe>
    }
}

@code {
    [Parameter] public DashboardData dashboardData { get; set; } = new();
    [Parameter] public string DashboardId { get; set; } = string.Empty;
    [Parameter] public bool IsAllowRefresh { get; set; }
    [Parameter] public bool IsAllowPrint { get; set; }
    [Parameter] public bool AutoLoad { get; set; } = true;
    [Parameter] public int Language { get; set; } = 0;

    string url = "";
    bool isError = false;
    string errorMessage;
    string queryStringParameters = "";
    string parameters = "";
    string values = "";
    private string dashboardHTML { get; set; } = string.Empty;
    private bool isLoading = false;
    HttpClient httpClient = new HttpClient();
    private bool isIframeLoaded;

    protected override async Task OnInitializedAsync()
    {
        // await LoadIframe();
        if (AutoLoad)
        {
            await Refersh();
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        if (AutoLoad)
        {
            await LoadIframe();
        }

    }

    public async Task Refersh()
    {

        await LoadIframe();

    }

    public async Task LoadIframe()
    {
        parameters = "";
        try
        {
            if (string.IsNullOrEmpty(DashboardId))
            {
                errorMessage = "Dashboard id required";
            }
            else if (dashboardData is not null && dashboardData.DashboardParams is null)
            {
                errorMessage = "parameters for dashboard is required";
            }
            else if (dashboardData is not null && dashboardData.DashboardParams.Count == 0)
            {
                errorMessage = "parameters for dashboard required";
            }
            else if (string.IsNullOrEmpty(Storage.EncryptionKey))
            {
                errorMessage = "EncryptedKey required";
            }
            else if (string.IsNullOrEmpty(Storage.RootAddress))
            {
                errorMessage = "root address of dynamic board required";
            }
            else
            {
                if (dashboardData is not null && dashboardData.DashboardParams is not null)
                {
                    if (dashboardData.DashboardParams.Count > 0)
                    {
                        foreach (var item in dashboardData.DashboardParams)
                        {
                            var v = item.Values.ToList();
                            values = string.Join("|", v);

                            parameters += "[" + item.Name + ":" + values + "]";
                            values = "";
                        }
                    }

                }
            }
            queryStringParameters = "dashboardID="+DashboardId+"&language="+Language+"&parameters=["+parameters+"]";
            EncryptionHelper.encryptionKey = Storage.EncryptionKey;
            var encryptedData = EncryptionHelper.Encrypt(queryStringParameters);
            url = Storage.RootAddress + "Dashboard/GetDashboardEncrypted?encryptedParam=" + encryptedData;

            dashboardHTML = await httpClient.GetStringAsync(url);
            isError = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = ex.ToString();
            StateHasChanged();
        }


    }

}

